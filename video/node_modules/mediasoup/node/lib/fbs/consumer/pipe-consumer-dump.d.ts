import * as flatbuffers from 'flatbuffers';
import { BaseConsumerDump, BaseConsumerDumpT } from '../../fbs/consumer/base-consumer-dump';
import { Dump, DumpT } from '../../fbs/rtp-stream/dump';
export declare class PipeConsumerDump implements flatbuffers.IUnpackableObject<PipeConsumerDumpT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): PipeConsumerDump;
    static getRootAsPipeConsumerDump(bb: flatbuffers.ByteBuffer, obj?: PipeConsumerDump): PipeConsumerDump;
    static getSizePrefixedRootAsPipeConsumerDump(bb: flatbuffers.ByteBuffer, obj?: PipeConsumerDump): PipeConsumerDump;
    base(obj?: BaseConsumerDump): BaseConsumerDump | null;
    rtpStreams(index: number, obj?: Dump): Dump | null;
    rtpStreamsLength(): number;
    static startPipeConsumerDump(builder: flatbuffers.Builder): void;
    static addBase(builder: flatbuffers.Builder, baseOffset: flatbuffers.Offset): void;
    static addRtpStreams(builder: flatbuffers.Builder, rtpStreamsOffset: flatbuffers.Offset): void;
    static createRtpStreamsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startRtpStreamsVector(builder: flatbuffers.Builder, numElems: number): void;
    static endPipeConsumerDump(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createPipeConsumerDump(builder: flatbuffers.Builder, baseOffset: flatbuffers.Offset, rtpStreamsOffset: flatbuffers.Offset): flatbuffers.Offset;
    unpack(): PipeConsumerDumpT;
    unpackTo(_o: PipeConsumerDumpT): void;
}
export declare class PipeConsumerDumpT implements flatbuffers.IGeneratedObject {
    base: BaseConsumerDumpT | null;
    rtpStreams: (DumpT)[];
    constructor(base?: BaseConsumerDumpT | null, rtpStreams?: (DumpT)[]);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=pipe-consumer-dump.d.ts.map