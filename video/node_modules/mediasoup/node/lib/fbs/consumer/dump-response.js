"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DumpResponseT = exports.DumpResponse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const consumer_dump_1 = require("../../fbs/consumer/consumer-dump");
class DumpResponse {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDumpResponse(bb, obj) {
        return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDumpResponse(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DumpResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    data(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new consumer_dump_1.ConsumerDump()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startDumpResponse(builder) {
        builder.startObject(1);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(0, dataOffset, 0);
    }
    static endDumpResponse(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // data
        return offset;
    }
    static createDumpResponse(builder, dataOffset) {
        DumpResponse.startDumpResponse(builder);
        DumpResponse.addData(builder, dataOffset);
        return DumpResponse.endDumpResponse(builder);
    }
    unpack() {
        return new DumpResponseT((this.data() !== null ? this.data().unpack() : null));
    }
    unpackTo(_o) {
        _o.data = (this.data() !== null ? this.data().unpack() : null);
    }
}
exports.DumpResponse = DumpResponse;
class DumpResponseT {
    data;
    constructor(data = null) {
        this.data = data;
    }
    pack(builder) {
        const data = (this.data !== null ? this.data.pack(builder) : 0);
        return DumpResponse.createDumpResponse(builder, data);
    }
}
exports.DumpResponseT = DumpResponseT;
