"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleConsumerDumpT = exports.SimpleConsumerDump = void 0;
const flatbuffers = require("flatbuffers");
const base_consumer_dump_1 = require("../../fbs/consumer/base-consumer-dump");
const dump_1 = require("../../fbs/rtp-stream/dump");
class SimpleConsumerDump {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSimpleConsumerDump(bb, obj) {
        return (obj || new SimpleConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSimpleConsumerDump(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SimpleConsumerDump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    base(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new base_consumer_dump_1.BaseConsumerDump()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    rtpStream(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new dump_1.Dump()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    static startSimpleConsumerDump(builder) {
        builder.startObject(2);
    }
    static addBase(builder, baseOffset) {
        builder.addFieldOffset(0, baseOffset, 0);
    }
    static addRtpStream(builder, rtpStreamOffset) {
        builder.addFieldOffset(1, rtpStreamOffset, 0);
    }
    static endSimpleConsumerDump(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // base
        builder.requiredField(offset, 6); // rtp_stream
        return offset;
    }
    unpack() {
        return new SimpleConsumerDumpT((this.base() !== null ? this.base().unpack() : null), (this.rtpStream() !== null ? this.rtpStream().unpack() : null));
    }
    unpackTo(_o) {
        _o.base = (this.base() !== null ? this.base().unpack() : null);
        _o.rtpStream = (this.rtpStream() !== null ? this.rtpStream().unpack() : null);
    }
}
exports.SimpleConsumerDump = SimpleConsumerDump;
class SimpleConsumerDumpT {
    base;
    rtpStream;
    constructor(base = null, rtpStream = null) {
        this.base = base;
        this.rtpStream = rtpStream;
    }
    pack(builder) {
        const base = (this.base !== null ? this.base.pack(builder) : 0);
        const rtpStream = (this.rtpStream !== null ? this.rtpStream.pack(builder) : 0);
        SimpleConsumerDump.startSimpleConsumerDump(builder);
        SimpleConsumerDump.addBase(builder, base);
        SimpleConsumerDump.addRtpStream(builder, rtpStream);
        return SimpleConsumerDump.endSimpleConsumerDump(builder);
    }
}
exports.SimpleConsumerDumpT = SimpleConsumerDumpT;
