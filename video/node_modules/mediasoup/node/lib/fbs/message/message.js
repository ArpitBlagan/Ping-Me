"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageT = exports.Message = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const body_1 = require("../../fbs/message/body");
class Message {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMessage(bb, obj) {
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    dataType() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : body_1.Body.NONE;
    }
    data(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    static startMessage(builder) {
        builder.startObject(2);
    }
    static addDataType(builder, dataType) {
        builder.addFieldInt8(0, dataType, body_1.Body.NONE);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(1, dataOffset, 0);
    }
    static endMessage(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // data
        return offset;
    }
    static finishMessageBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMessageBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMessage(builder, dataType, dataOffset) {
        Message.startMessage(builder);
        Message.addDataType(builder, dataType);
        Message.addData(builder, dataOffset);
        return Message.endMessage(builder);
    }
    unpack() {
        return new MessageT(this.dataType(), (() => {
            const temp = (0, body_1.unionToBody)(this.dataType(), this.data.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })());
    }
    unpackTo(_o) {
        _o.dataType = this.dataType();
        _o.data = (() => {
            const temp = (0, body_1.unionToBody)(this.dataType(), this.data.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
    }
}
exports.Message = Message;
class MessageT {
    dataType;
    data;
    constructor(dataType = body_1.Body.NONE, data = null) {
        this.dataType = dataType;
        this.data = data;
    }
    pack(builder) {
        const data = builder.createObjectOffset(this.data);
        return Message.createMessage(builder, this.dataType, data);
    }
}
exports.MessageT = MessageT;
