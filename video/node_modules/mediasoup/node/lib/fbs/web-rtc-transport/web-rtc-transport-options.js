"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebRtcTransportOptionsT = exports.WebRtcTransportOptions = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const options_1 = require("../../fbs/transport/options");
const listen_1 = require("../../fbs/web-rtc-transport/listen");
class WebRtcTransportOptions {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsWebRtcTransportOptions(bb, obj) {
        return (obj || new WebRtcTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsWebRtcTransportOptions(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new WebRtcTransportOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    base(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new options_1.Options()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    listenType() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : listen_1.Listen.NONE;
    }
    listen(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    enableUdp() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    enableTcp() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : true;
    }
    preferUdp() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    preferTcp() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    iceConsentTimeout() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 30;
    }
    static startWebRtcTransportOptions(builder) {
        builder.startObject(8);
    }
    static addBase(builder, baseOffset) {
        builder.addFieldOffset(0, baseOffset, 0);
    }
    static addListenType(builder, listenType) {
        builder.addFieldInt8(1, listenType, listen_1.Listen.NONE);
    }
    static addListen(builder, listenOffset) {
        builder.addFieldOffset(2, listenOffset, 0);
    }
    static addEnableUdp(builder, enableUdp) {
        builder.addFieldInt8(3, +enableUdp, +true);
    }
    static addEnableTcp(builder, enableTcp) {
        builder.addFieldInt8(4, +enableTcp, +true);
    }
    static addPreferUdp(builder, preferUdp) {
        builder.addFieldInt8(5, +preferUdp, +false);
    }
    static addPreferTcp(builder, preferTcp) {
        builder.addFieldInt8(6, +preferTcp, +false);
    }
    static addIceConsentTimeout(builder, iceConsentTimeout) {
        builder.addFieldInt8(7, iceConsentTimeout, 30);
    }
    static endWebRtcTransportOptions(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // base
        builder.requiredField(offset, 8); // listen
        return offset;
    }
    static createWebRtcTransportOptions(builder, baseOffset, listenType, listenOffset, enableUdp, enableTcp, preferUdp, preferTcp, iceConsentTimeout) {
        WebRtcTransportOptions.startWebRtcTransportOptions(builder);
        WebRtcTransportOptions.addBase(builder, baseOffset);
        WebRtcTransportOptions.addListenType(builder, listenType);
        WebRtcTransportOptions.addListen(builder, listenOffset);
        WebRtcTransportOptions.addEnableUdp(builder, enableUdp);
        WebRtcTransportOptions.addEnableTcp(builder, enableTcp);
        WebRtcTransportOptions.addPreferUdp(builder, preferUdp);
        WebRtcTransportOptions.addPreferTcp(builder, preferTcp);
        WebRtcTransportOptions.addIceConsentTimeout(builder, iceConsentTimeout);
        return WebRtcTransportOptions.endWebRtcTransportOptions(builder);
    }
    unpack() {
        return new WebRtcTransportOptionsT((this.base() !== null ? this.base().unpack() : null), this.listenType(), (() => {
            const temp = (0, listen_1.unionToListen)(this.listenType(), this.listen.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.enableUdp(), this.enableTcp(), this.preferUdp(), this.preferTcp(), this.iceConsentTimeout());
    }
    unpackTo(_o) {
        _o.base = (this.base() !== null ? this.base().unpack() : null);
        _o.listenType = this.listenType();
        _o.listen = (() => {
            const temp = (0, listen_1.unionToListen)(this.listenType(), this.listen.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.enableUdp = this.enableUdp();
        _o.enableTcp = this.enableTcp();
        _o.preferUdp = this.preferUdp();
        _o.preferTcp = this.preferTcp();
        _o.iceConsentTimeout = this.iceConsentTimeout();
    }
}
exports.WebRtcTransportOptions = WebRtcTransportOptions;
class WebRtcTransportOptionsT {
    base;
    listenType;
    listen;
    enableUdp;
    enableTcp;
    preferUdp;
    preferTcp;
    iceConsentTimeout;
    constructor(base = null, listenType = listen_1.Listen.NONE, listen = null, enableUdp = true, enableTcp = true, preferUdp = false, preferTcp = false, iceConsentTimeout = 30) {
        this.base = base;
        this.listenType = listenType;
        this.listen = listen;
        this.enableUdp = enableUdp;
        this.enableTcp = enableTcp;
        this.preferUdp = preferUdp;
        this.preferTcp = preferTcp;
        this.iceConsentTimeout = iceConsentTimeout;
    }
    pack(builder) {
        const base = (this.base !== null ? this.base.pack(builder) : 0);
        const listen = builder.createObjectOffset(this.listen);
        return WebRtcTransportOptions.createWebRtcTransportOptions(builder, base, this.listenType, listen, this.enableUdp, this.enableTcp, this.preferUdp, this.preferTcp, this.iceConsentTimeout);
    }
}
exports.WebRtcTransportOptionsT = WebRtcTransportOptionsT;
