"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoveSubchannelRequestT = exports.RemoveSubchannelRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class RemoveSubchannelRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsRemoveSubchannelRequest(bb, obj) {
        return (obj || new RemoveSubchannelRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsRemoveSubchannelRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new RemoveSubchannelRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    subchannel() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    static startRemoveSubchannelRequest(builder) {
        builder.startObject(1);
    }
    static addSubchannel(builder, subchannel) {
        builder.addFieldInt16(0, subchannel, 0);
    }
    static endRemoveSubchannelRequest(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createRemoveSubchannelRequest(builder, subchannel) {
        RemoveSubchannelRequest.startRemoveSubchannelRequest(builder);
        RemoveSubchannelRequest.addSubchannel(builder, subchannel);
        return RemoveSubchannelRequest.endRemoveSubchannelRequest(builder);
    }
    unpack() {
        return new RemoveSubchannelRequestT(this.subchannel());
    }
    unpackTo(_o) {
        _o.subchannel = this.subchannel();
    }
}
exports.RemoveSubchannelRequest = RemoveSubchannelRequest;
class RemoveSubchannelRequestT {
    subchannel;
    constructor(subchannel = 0) {
        this.subchannel = subchannel;
    }
    pack(builder) {
        return RemoveSubchannelRequest.createRemoveSubchannelRequest(builder, this.subchannel);
    }
}
exports.RemoveSubchannelRequestT = RemoveSubchannelRequestT;
