"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferedAmountLowNotificationT = exports.BufferedAmountLowNotification = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class BufferedAmountLowNotification {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBufferedAmountLowNotification(bb, obj) {
        return (obj || new BufferedAmountLowNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBufferedAmountLowNotification(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BufferedAmountLowNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    bufferedAmount() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    static startBufferedAmountLowNotification(builder) {
        builder.startObject(1);
    }
    static addBufferedAmount(builder, bufferedAmount) {
        builder.addFieldInt32(0, bufferedAmount, 0);
    }
    static endBufferedAmountLowNotification(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createBufferedAmountLowNotification(builder, bufferedAmount) {
        BufferedAmountLowNotification.startBufferedAmountLowNotification(builder);
        BufferedAmountLowNotification.addBufferedAmount(builder, bufferedAmount);
        return BufferedAmountLowNotification.endBufferedAmountLowNotification(builder);
    }
    unpack() {
        return new BufferedAmountLowNotificationT(this.bufferedAmount());
    }
    unpackTo(_o) {
        _o.bufferedAmount = this.bufferedAmount();
    }
}
exports.BufferedAmountLowNotification = BufferedAmountLowNotification;
class BufferedAmountLowNotificationT {
    bufferedAmount;
    constructor(bufferedAmount = 0) {
        this.bufferedAmount = bufferedAmount;
    }
    pack(builder) {
        return BufferedAmountLowNotification.createBufferedAmountLowNotification(builder, this.bufferedAmount);
    }
}
exports.BufferedAmountLowNotificationT = BufferedAmountLowNotificationT;
