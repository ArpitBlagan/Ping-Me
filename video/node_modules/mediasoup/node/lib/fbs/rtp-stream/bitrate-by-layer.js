"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitrateByLayerT = exports.BitrateByLayer = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class BitrateByLayer {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsBitrateByLayer(bb, obj) {
        return (obj || new BitrateByLayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsBitrateByLayer(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BitrateByLayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    layer(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    bitrate() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    static startBitrateByLayer(builder) {
        builder.startObject(2);
    }
    static addLayer(builder, layerOffset) {
        builder.addFieldOffset(0, layerOffset, 0);
    }
    static addBitrate(builder, bitrate) {
        builder.addFieldInt32(1, bitrate, 0);
    }
    static endBitrateByLayer(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // layer
        return offset;
    }
    static createBitrateByLayer(builder, layerOffset, bitrate) {
        BitrateByLayer.startBitrateByLayer(builder);
        BitrateByLayer.addLayer(builder, layerOffset);
        BitrateByLayer.addBitrate(builder, bitrate);
        return BitrateByLayer.endBitrateByLayer(builder);
    }
    unpack() {
        return new BitrateByLayerT(this.layer(), this.bitrate());
    }
    unpackTo(_o) {
        _o.layer = this.layer();
        _o.bitrate = this.bitrate();
    }
}
exports.BitrateByLayer = BitrateByLayer;
class BitrateByLayerT {
    layer;
    bitrate;
    constructor(layer = null, bitrate = 0) {
        this.layer = layer;
        this.bitrate = bitrate;
    }
    pack(builder) {
        const layer = (this.layer !== null ? builder.createString(this.layer) : 0);
        return BitrateByLayer.createBitrateByLayer(builder, layer, this.bitrate);
    }
}
exports.BitrateByLayerT = BitrateByLayerT;
