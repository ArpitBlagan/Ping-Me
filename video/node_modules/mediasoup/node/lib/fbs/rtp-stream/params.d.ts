import * as flatbuffers from 'flatbuffers';
export declare class Params implements flatbuffers.IUnpackableObject<ParamsT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): Params;
    static getRootAsParams(bb: flatbuffers.ByteBuffer, obj?: Params): Params;
    static getSizePrefixedRootAsParams(bb: flatbuffers.ByteBuffer, obj?: Params): Params;
    encodingIdx(): number;
    ssrc(): number;
    payloadType(): number;
    mimeType(): string | null;
    mimeType(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    clockRate(): number;
    rid(): string | null;
    rid(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    cname(): string | null;
    cname(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    rtxSsrc(): number | null;
    rtxPayloadType(): number | null;
    useNack(): boolean;
    usePli(): boolean;
    useFir(): boolean;
    useInBandFec(): boolean;
    useDtx(): boolean;
    spatialLayers(): number;
    temporalLayers(): number;
    static startParams(builder: flatbuffers.Builder): void;
    static addEncodingIdx(builder: flatbuffers.Builder, encodingIdx: number): void;
    static addSsrc(builder: flatbuffers.Builder, ssrc: number): void;
    static addPayloadType(builder: flatbuffers.Builder, payloadType: number): void;
    static addMimeType(builder: flatbuffers.Builder, mimeTypeOffset: flatbuffers.Offset): void;
    static addClockRate(builder: flatbuffers.Builder, clockRate: number): void;
    static addRid(builder: flatbuffers.Builder, ridOffset: flatbuffers.Offset): void;
    static addCname(builder: flatbuffers.Builder, cnameOffset: flatbuffers.Offset): void;
    static addRtxSsrc(builder: flatbuffers.Builder, rtxSsrc: number): void;
    static addRtxPayloadType(builder: flatbuffers.Builder, rtxPayloadType: number): void;
    static addUseNack(builder: flatbuffers.Builder, useNack: boolean): void;
    static addUsePli(builder: flatbuffers.Builder, usePli: boolean): void;
    static addUseFir(builder: flatbuffers.Builder, useFir: boolean): void;
    static addUseInBandFec(builder: flatbuffers.Builder, useInBandFec: boolean): void;
    static addUseDtx(builder: flatbuffers.Builder, useDtx: boolean): void;
    static addSpatialLayers(builder: flatbuffers.Builder, spatialLayers: number): void;
    static addTemporalLayers(builder: flatbuffers.Builder, temporalLayers: number): void;
    static endParams(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createParams(builder: flatbuffers.Builder, encodingIdx: number, ssrc: number, payloadType: number, mimeTypeOffset: flatbuffers.Offset, clockRate: number, ridOffset: flatbuffers.Offset, cnameOffset: flatbuffers.Offset, rtxSsrc: number | null, rtxPayloadType: number | null, useNack: boolean, usePli: boolean, useFir: boolean, useInBandFec: boolean, useDtx: boolean, spatialLayers: number, temporalLayers: number): flatbuffers.Offset;
    unpack(): ParamsT;
    unpackTo(_o: ParamsT): void;
}
export declare class ParamsT implements flatbuffers.IGeneratedObject {
    encodingIdx: number;
    ssrc: number;
    payloadType: number;
    mimeType: string | Uint8Array | null;
    clockRate: number;
    rid: string | Uint8Array | null;
    cname: string | Uint8Array | null;
    rtxSsrc: number | null;
    rtxPayloadType: number | null;
    useNack: boolean;
    usePli: boolean;
    useFir: boolean;
    useInBandFec: boolean;
    useDtx: boolean;
    spatialLayers: number;
    temporalLayers: number;
    constructor(encodingIdx?: number, ssrc?: number, payloadType?: number, mimeType?: string | Uint8Array | null, clockRate?: number, rid?: string | Uint8Array | null, cname?: string | Uint8Array | null, rtxSsrc?: number | null, rtxPayloadType?: number | null, useNack?: boolean, usePli?: boolean, useFir?: boolean, useInBandFec?: boolean, useDtx?: boolean, spatialLayers?: number, temporalLayers?: number);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=params.d.ts.map