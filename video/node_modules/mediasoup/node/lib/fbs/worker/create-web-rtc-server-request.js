"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateWebRtcServerRequestT = exports.CreateWebRtcServerRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const listen_info_1 = require("../../fbs/transport/listen-info");
class CreateWebRtcServerRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCreateWebRtcServerRequest(bb, obj) {
        return (obj || new CreateWebRtcServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCreateWebRtcServerRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CreateWebRtcServerRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    webRtcServerId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    listenInfos(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new listen_info_1.ListenInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    listenInfosLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startCreateWebRtcServerRequest(builder) {
        builder.startObject(2);
    }
    static addWebRtcServerId(builder, webRtcServerIdOffset) {
        builder.addFieldOffset(0, webRtcServerIdOffset, 0);
    }
    static addListenInfos(builder, listenInfosOffset) {
        builder.addFieldOffset(1, listenInfosOffset, 0);
    }
    static createListenInfosVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startListenInfosVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endCreateWebRtcServerRequest(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // web_rtc_server_id
        return offset;
    }
    static createCreateWebRtcServerRequest(builder, webRtcServerIdOffset, listenInfosOffset) {
        CreateWebRtcServerRequest.startCreateWebRtcServerRequest(builder);
        CreateWebRtcServerRequest.addWebRtcServerId(builder, webRtcServerIdOffset);
        CreateWebRtcServerRequest.addListenInfos(builder, listenInfosOffset);
        return CreateWebRtcServerRequest.endCreateWebRtcServerRequest(builder);
    }
    unpack() {
        return new CreateWebRtcServerRequestT(this.webRtcServerId(), this.bb.createObjList(this.listenInfos.bind(this), this.listenInfosLength()));
    }
    unpackTo(_o) {
        _o.webRtcServerId = this.webRtcServerId();
        _o.listenInfos = this.bb.createObjList(this.listenInfos.bind(this), this.listenInfosLength());
    }
}
exports.CreateWebRtcServerRequest = CreateWebRtcServerRequest;
class CreateWebRtcServerRequestT {
    webRtcServerId;
    listenInfos;
    constructor(webRtcServerId = null, listenInfos = []) {
        this.webRtcServerId = webRtcServerId;
        this.listenInfos = listenInfos;
    }
    pack(builder) {
        const webRtcServerId = (this.webRtcServerId !== null ? builder.createString(this.webRtcServerId) : 0);
        const listenInfos = CreateWebRtcServerRequest.createListenInfosVector(builder, builder.createObjectOffsetList(this.listenInfos));
        return CreateWebRtcServerRequest.createCreateWebRtcServerRequest(builder, webRtcServerId, listenInfos);
    }
}
exports.CreateWebRtcServerRequestT = CreateWebRtcServerRequestT;
