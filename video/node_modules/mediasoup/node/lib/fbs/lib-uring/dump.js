"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DumpT = exports.Dump = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class Dump {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDump(bb, obj) {
        return (obj || new Dump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDump(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Dump()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    sqeProcessCount() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    sqeMissCount() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    userDataMissCount() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    static startDump(builder) {
        builder.startObject(3);
    }
    static addSqeProcessCount(builder, sqeProcessCount) {
        builder.addFieldInt64(0, sqeProcessCount, BigInt('0'));
    }
    static addSqeMissCount(builder, sqeMissCount) {
        builder.addFieldInt64(1, sqeMissCount, BigInt('0'));
    }
    static addUserDataMissCount(builder, userDataMissCount) {
        builder.addFieldInt64(2, userDataMissCount, BigInt('0'));
    }
    static endDump(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDump(builder, sqeProcessCount, sqeMissCount, userDataMissCount) {
        Dump.startDump(builder);
        Dump.addSqeProcessCount(builder, sqeProcessCount);
        Dump.addSqeMissCount(builder, sqeMissCount);
        Dump.addUserDataMissCount(builder, userDataMissCount);
        return Dump.endDump(builder);
    }
    unpack() {
        return new DumpT(this.sqeProcessCount(), this.sqeMissCount(), this.userDataMissCount());
    }
    unpackTo(_o) {
        _o.sqeProcessCount = this.sqeProcessCount();
        _o.sqeMissCount = this.sqeMissCount();
        _o.userDataMissCount = this.userDataMissCount();
    }
}
exports.Dump = Dump;
class DumpT {
    sqeProcessCount;
    sqeMissCount;
    userDataMissCount;
    constructor(sqeProcessCount = BigInt('0'), sqeMissCount = BigInt('0'), userDataMissCount = BigInt('0')) {
        this.sqeProcessCount = sqeProcessCount;
        this.sqeMissCount = sqeMissCount;
        this.userDataMissCount = userDataMissCount;
    }
    pack(builder) {
        return Dump.createDump(builder, this.sqeProcessCount, this.sqeMissCount, this.userDataMissCount);
    }
}
exports.DumpT = DumpT;
