import * as flatbuffers from 'flatbuffers';
import { SctpState } from '../../fbs/sctp-association/sctp-state';
export declare class Stats implements flatbuffers.IUnpackableObject<StatsT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): Stats;
    static getRootAsStats(bb: flatbuffers.ByteBuffer, obj?: Stats): Stats;
    static getSizePrefixedRootAsStats(bb: flatbuffers.ByteBuffer, obj?: Stats): Stats;
    transportId(): string | null;
    transportId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    timestamp(): bigint;
    sctpState(): SctpState | null;
    bytesReceived(): bigint;
    recvBitrate(): number;
    bytesSent(): bigint;
    sendBitrate(): number;
    rtpBytesReceived(): bigint;
    rtpRecvBitrate(): number;
    rtpBytesSent(): bigint;
    rtpSendBitrate(): number;
    rtxBytesReceived(): bigint;
    rtxRecvBitrate(): number;
    rtxBytesSent(): bigint;
    rtxSendBitrate(): number;
    probationBytesSent(): bigint;
    probationSendBitrate(): number;
    availableOutgoingBitrate(): number | null;
    availableIncomingBitrate(): number | null;
    maxIncomingBitrate(): number | null;
    maxOutgoingBitrate(): number | null;
    minOutgoingBitrate(): number | null;
    rtpPacketLossReceived(): number | null;
    rtpPacketLossSent(): number | null;
    static startStats(builder: flatbuffers.Builder): void;
    static addTransportId(builder: flatbuffers.Builder, transportIdOffset: flatbuffers.Offset): void;
    static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint): void;
    static addSctpState(builder: flatbuffers.Builder, sctpState: SctpState): void;
    static addBytesReceived(builder: flatbuffers.Builder, bytesReceived: bigint): void;
    static addRecvBitrate(builder: flatbuffers.Builder, recvBitrate: number): void;
    static addBytesSent(builder: flatbuffers.Builder, bytesSent: bigint): void;
    static addSendBitrate(builder: flatbuffers.Builder, sendBitrate: number): void;
    static addRtpBytesReceived(builder: flatbuffers.Builder, rtpBytesReceived: bigint): void;
    static addRtpRecvBitrate(builder: flatbuffers.Builder, rtpRecvBitrate: number): void;
    static addRtpBytesSent(builder: flatbuffers.Builder, rtpBytesSent: bigint): void;
    static addRtpSendBitrate(builder: flatbuffers.Builder, rtpSendBitrate: number): void;
    static addRtxBytesReceived(builder: flatbuffers.Builder, rtxBytesReceived: bigint): void;
    static addRtxRecvBitrate(builder: flatbuffers.Builder, rtxRecvBitrate: number): void;
    static addRtxBytesSent(builder: flatbuffers.Builder, rtxBytesSent: bigint): void;
    static addRtxSendBitrate(builder: flatbuffers.Builder, rtxSendBitrate: number): void;
    static addProbationBytesSent(builder: flatbuffers.Builder, probationBytesSent: bigint): void;
    static addProbationSendBitrate(builder: flatbuffers.Builder, probationSendBitrate: number): void;
    static addAvailableOutgoingBitrate(builder: flatbuffers.Builder, availableOutgoingBitrate: number): void;
    static addAvailableIncomingBitrate(builder: flatbuffers.Builder, availableIncomingBitrate: number): void;
    static addMaxIncomingBitrate(builder: flatbuffers.Builder, maxIncomingBitrate: number): void;
    static addMaxOutgoingBitrate(builder: flatbuffers.Builder, maxOutgoingBitrate: number): void;
    static addMinOutgoingBitrate(builder: flatbuffers.Builder, minOutgoingBitrate: number): void;
    static addRtpPacketLossReceived(builder: flatbuffers.Builder, rtpPacketLossReceived: number): void;
    static addRtpPacketLossSent(builder: flatbuffers.Builder, rtpPacketLossSent: number): void;
    static endStats(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createStats(builder: flatbuffers.Builder, transportIdOffset: flatbuffers.Offset, timestamp: bigint, sctpState: SctpState | null, bytesReceived: bigint, recvBitrate: number, bytesSent: bigint, sendBitrate: number, rtpBytesReceived: bigint, rtpRecvBitrate: number, rtpBytesSent: bigint, rtpSendBitrate: number, rtxBytesReceived: bigint, rtxRecvBitrate: number, rtxBytesSent: bigint, rtxSendBitrate: number, probationBytesSent: bigint, probationSendBitrate: number, availableOutgoingBitrate: number | null, availableIncomingBitrate: number | null, maxIncomingBitrate: number | null, maxOutgoingBitrate: number | null, minOutgoingBitrate: number | null, rtpPacketLossReceived: number | null, rtpPacketLossSent: number | null): flatbuffers.Offset;
    unpack(): StatsT;
    unpackTo(_o: StatsT): void;
}
export declare class StatsT implements flatbuffers.IGeneratedObject {
    transportId: string | Uint8Array | null;
    timestamp: bigint;
    sctpState: SctpState | null;
    bytesReceived: bigint;
    recvBitrate: number;
    bytesSent: bigint;
    sendBitrate: number;
    rtpBytesReceived: bigint;
    rtpRecvBitrate: number;
    rtpBytesSent: bigint;
    rtpSendBitrate: number;
    rtxBytesReceived: bigint;
    rtxRecvBitrate: number;
    rtxBytesSent: bigint;
    rtxSendBitrate: number;
    probationBytesSent: bigint;
    probationSendBitrate: number;
    availableOutgoingBitrate: number | null;
    availableIncomingBitrate: number | null;
    maxIncomingBitrate: number | null;
    maxOutgoingBitrate: number | null;
    minOutgoingBitrate: number | null;
    rtpPacketLossReceived: number | null;
    rtpPacketLossSent: number | null;
    constructor(transportId?: string | Uint8Array | null, timestamp?: bigint, sctpState?: SctpState | null, bytesReceived?: bigint, recvBitrate?: number, bytesSent?: bigint, sendBitrate?: number, rtpBytesReceived?: bigint, rtpRecvBitrate?: number, rtpBytesSent?: bigint, rtpSendBitrate?: number, rtxBytesReceived?: bigint, rtxRecvBitrate?: number, rtxBytesSent?: bigint, rtxSendBitrate?: number, probationBytesSent?: bigint, probationSendBitrate?: number, availableOutgoingBitrate?: number | null, availableIncomingBitrate?: number | null, maxIncomingBitrate?: number | null, maxOutgoingBitrate?: number | null, minOutgoingBitrate?: number | null, rtpPacketLossReceived?: number | null, rtpPacketLossSent?: number | null);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
//# sourceMappingURL=stats.d.ts.map