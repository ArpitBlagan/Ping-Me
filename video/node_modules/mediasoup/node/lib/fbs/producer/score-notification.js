"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScoreNotificationT = exports.ScoreNotification = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
const score_1 = require("../../fbs/producer/score");
class ScoreNotification {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsScoreNotification(bb, obj) {
        return (obj || new ScoreNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsScoreNotification(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ScoreNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    scores(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new score_1.Score()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    scoresLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startScoreNotification(builder) {
        builder.startObject(1);
    }
    static addScores(builder, scoresOffset) {
        builder.addFieldOffset(0, scoresOffset, 0);
    }
    static createScoresVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startScoresVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endScoreNotification(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // scores
        return offset;
    }
    static createScoreNotification(builder, scoresOffset) {
        ScoreNotification.startScoreNotification(builder);
        ScoreNotification.addScores(builder, scoresOffset);
        return ScoreNotification.endScoreNotification(builder);
    }
    unpack() {
        return new ScoreNotificationT(this.bb.createObjList(this.scores.bind(this), this.scoresLength()));
    }
    unpackTo(_o) {
        _o.scores = this.bb.createObjList(this.scores.bind(this), this.scoresLength());
    }
}
exports.ScoreNotification = ScoreNotification;
class ScoreNotificationT {
    scores;
    constructor(scores = []) {
        this.scores = scores;
    }
    pack(builder) {
        const scores = ScoreNotification.createScoresVector(builder, builder.createObjectOffsetList(this.scores));
        return ScoreNotification.createScoreNotification(builder, scores);
    }
}
exports.ScoreNotificationT = ScoreNotificationT;
